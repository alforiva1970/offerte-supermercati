# Generated by Django 5.2.6 on 2025-09-22 10:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="PriceList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "service_class",
                    models.CharField(
                        choices=[
                            ("Auto", "Auto"),
                            ("Van", "Van"),
                            ("Minibus", "Minibus"),
                            ("Bus", "Bus"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("Transfer A-B", "Transfer A-B"),
                            ("Disposizione Oraria", "Disposizione Oraria"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "price_per_km",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "price_per_hour",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "operator_rate",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Compenso per l'operatore (es. per ora o a transfer)",
                        max_digits=10,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "service_class",
                    models.CharField(
                        choices=[
                            ("Auto", "Auto"),
                            ("Van", "Van"),
                            ("Minibus", "Minibus"),
                            ("Bus", "Bus"),
                        ],
                        max_length=10,
                    ),
                ),
                ("license_plate", models.CharField(max_length=15, unique=True)),
                ("capacity", models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("Amministratore", "Amministratore"),
                            ("Cliente", "Cliente"),
                            ("Utilizzatore", "Utilizzatore"),
                            ("Operatore", "Operatore"),
                        ],
                        default="Utilizzatore",
                        max_length=15,
                    ),
                ),
                (
                    "associated_client",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"role": "Cliente"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ServiceRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_location", models.CharField(max_length=255)),
                ("end_location", models.CharField(max_length=255)),
                ("requested_datetime", models.DateTimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("In Attesa", "In Attesa"),
                            ("Approvato", "Approvato"),
                            ("Rifiutato", "Rifiutato"),
                        ],
                        default="In Attesa",
                        max_length=15,
                    ),
                ),
                ("client_approved", models.BooleanField(default=False)),
                ("admin_approved", models.BooleanField(default=False)),
                (
                    "requester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Transfer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("Transfer A-B", "Transfer A-B"),
                            ("Disposizione Oraria", "Disposizione Oraria"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Richiesto", "Richiesto"),
                            ("Confermato", "Confermato"),
                            ("In Corso", "In Corso"),
                            ("Completato", "Completato"),
                            ("Annullato", "Annullato"),
                        ],
                        default="Richiesto",
                        max_length=15,
                    ),
                ),
                ("start_location", models.CharField(max_length=255)),
                (
                    "end_location",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("scheduled_start_time", models.DateTimeField()),
                (
                    "scheduled_duration_hours",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("actual_start_time", models.DateTimeField(blank=True, null=True)),
                ("actual_end_time", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("deviations", models.TextField(blank=True)),
                (
                    "service_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Prezzo finale per il cliente",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "service_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Compenso per l'operatore",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        limit_choices_to={"role": "Cliente"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="managed_transfers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "end_user",
                    models.ForeignKey(
                        blank=True,
                        help_text="Chi ha effettivamente usufruito del servizio",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="used_transfers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "operator",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"role": "Operatore"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_transfers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="transfers.vehicle",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DailyReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(unique=True)),
                ("total_value", models.DecimalField(decimal_places=2, max_digits=12)),
                ("total_cost", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "completed_transfers",
                    models.ManyToManyField(to="transfers.transfer"),
                ),
            ],
        ),
    ]
